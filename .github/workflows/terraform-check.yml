name: Terraform Check

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-check.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Terraform Format Check
      id: terraform-fmt
      run: |
        cd terraform
        terraform fmt -check -recursive
      continue-on-error: false
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false
    
    - name: Terraform Validate
      id: terraform-validate
      run: |
        cd terraform
        terraform validate
    
    - name: Terraform Plan (Dry Run)
      id: terraform-plan
      run: |
        cd terraform
        if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          terraform plan -input=false -no-color 2>&1 | tee plan_output.txt
        else
          echo "⚠️ Terraform plan skipped - AWS credentials not configured" > plan_output.txt
          echo "Add AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to repository secrets to enable plan generation."
        fi
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        cat plan_output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
      continue-on-error: true
    
    - name: Comment PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const planOutput = `${{ steps.terraform-plan.outputs.plan_output }}`;
          
          // GitHub comment limit is ~65k chars, leave some buffer for the rest of the comment
          const maxLength = 60000;
          
          const summaryComment = `## Terraform Check Results
          
          ### Format Check
          ${{ steps.terraform-fmt.outcome == 'success' && '✅ Passed' || '❌ Failed - Run `terraform fmt -recursive` to fix' }}
          
          ### Validation Check  
          ${{ steps.terraform-validate.outcome == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### Plan Check
          ${{ secrets.AWS_ACCESS_KEY_ID && '✅ Generated successfully' || '⚠️ Skipped (requires AWS credentials)' }}
          ${planOutput.length > maxLength ? '\n📋 **Plan output posted in separate comments below due to length**' : ''}
          `;
          
          try {
            // Post summary comment first
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summaryComment
            });
            
            // If plan output fits in one comment, post it
            if (planOutput.length <= maxLength) {
              const planComment = `<details>
              <summary>📋 Terraform Plan Output</summary>
              
              \`\`\`
              ${planOutput}
              \`\`\`
              
              </details>`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: planComment
              });
            } else {
              // Split into multiple comments
              const chunks = [];
              let currentPos = 0;
              let chunkIndex = 1;
              
              while (currentPos < planOutput.length) {
                const chunkSize = maxLength - 200; // Leave room for comment formatting
                const chunk = planOutput.substring(currentPos, currentPos + chunkSize);
                chunks.push(chunk);
                currentPos += chunkSize;
              }
              
              // Post each chunk as a separate comment
              for (let i = 0; i < chunks.length; i++) {
                const chunkComment = `<details>
                <summary>📋 Terraform Plan Output (Part ${i + 1}/${chunks.length})</summary>
                
                \`\`\`
                ${chunks[i]}
                \`\`\`
                
                </details>`;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: chunkComment
                });
                
                // Small delay between comments to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 500));
              }
            }
          } catch (error) {
            console.log('Could not create comment:', error.message);
          }